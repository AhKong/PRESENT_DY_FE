{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/ahkong/DEV/present-front/src/page/SongsPage.js\";\nimport React from \"react\";\nimport song from '../resource/testsong.m4a';\nimport { Table, Tag, Radio, Divider, Space } from 'antd';\n\nconst SongsPage = () => {\n  const columns = [{\n    title: 'Name',\n    dataIndex: 'name',\n    key: 'name',\n    render: text => /*#__PURE__*/_jsxDEV(\"a\", {\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 29\n    }, this)\n  }, {\n    title: 'Age',\n    dataIndex: 'age',\n    key: 'age'\n  }, {\n    title: 'Address',\n    dataIndex: 'address',\n    key: 'address'\n  }, {\n    title: 'Tags',\n    key: 'tags',\n    dataIndex: 'tags',\n    render: tags => /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: tags.map(tag => {\n        let color = tag.length > 5 ? 'geekblue' : 'green';\n\n        if (tag === 'loser') {\n          color = 'volcano';\n        }\n\n        return /*#__PURE__*/_jsxDEV(\"audio\", {\n          autoPlay: true,\n          controls: true,\n          children: /*#__PURE__*/_jsxDEV(\"source\", {\n            src: song,\n            type: \"audio/mp3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 29\n        }, this);\n      })\n    }, void 0, false)\n  }, {\n    title: 'Action',\n    key: 'action',\n    render: (text, record) => /*#__PURE__*/_jsxDEV(Space, {\n      size: \"middle\",\n      children: [/*#__PURE__*/_jsxDEV(\"a\", {\n        children: [\"Invite \", record.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }, this)\n  }];\n  const data = [{\n    key: '1',\n    name: 'John Brown',\n    age: 32,\n    address: 'New York No. 1 Lake Park',\n    tags: ['nice', 'developer']\n  }, {\n    key: '2',\n    name: 'Jim Green',\n    age: 42,\n    address: 'London No. 1 Lake Park',\n    tags: ['loser']\n  }, {\n    key: '3',\n    name: 'Joe Black',\n    age: 32,\n    address: 'Sidney No. 1 Lake Park',\n    tags: ['cool', 'teacher']\n  }];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Table, {\n      columns: columns,\n      dataSource: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uB3C4\\uC5F0\\uC774\\uB97C \\uD5A5\\uD55C \\uC138\\uB808\\uB098\\uB370\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"songFont\",\n      children: [/*#__PURE__*/_jsxDEV(\"audio\", {\n        autoPlay: true,\n        controls: true,\n        children: /*#__PURE__*/_jsxDEV(\"source\", {\n          src: song,\n          type: \"audio/mp3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), \" \\uC544\\uB984 ver\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_c = SongsPage;\nexport default SongsPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"SongsPage\");","map":{"version":3,"sources":["/Users/ahkong/DEV/present-front/src/page/SongsPage.js"],"names":["React","song","Table","Tag","Radio","Divider","Space","SongsPage","columns","title","dataIndex","key","render","text","tags","map","tag","color","length","record","name","data","age","address"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport song from '../resource/testsong.m4a'\nimport { Table, Tag,Radio, Divider ,Space} from 'antd';\nconst SongsPage = () =>{\n    const columns = [\n        {\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'name',\n            render: text => <a>{text}</a>,\n        },\n        {\n            title: 'Age',\n            dataIndex: 'age',\n            key: 'age',\n        },\n        {\n            title: 'Address',\n            dataIndex: 'address',\n            key: 'address',\n        },\n        {\n            title: 'Tags',\n            key: 'tags',\n            dataIndex: 'tags',\n            render: tags => (\n                <>\n                    {tags.map(tag => {\n                        let color = tag.length > 5 ? 'geekblue' : 'green';\n                        if (tag === 'loser') {\n                            color = 'volcano';\n                        }\n                        return (\n                            <audio autoPlay controls>\n                                <source src={song} type=\"audio/mp3\"/>\n                            </audio> \n\n                        );\n                    })}\n                </>\n            ),\n        },\n        {\n            title: 'Action',\n            key: 'action',\n            render: (text, record) => (\n                <Space size=\"middle\">\n                    <a>Invite {record.name}</a>\n                    <a>Delete</a>\n                </Space>\n            ),\n        },\n    ];\n    const data = [\n        {\n            key: '1',\n            name: 'John Brown',\n            age: 32,\n            address: 'New York No. 1 Lake Park',\n            tags: ['nice', 'developer'],\n        },\n        {\n            key: '2',\n            name: 'Jim Green',\n            age: 42,\n            address: 'London No. 1 Lake Park',\n            tags: ['loser'],\n        },\n        {\n            key: '3',\n            name: 'Joe Black',\n            age: 32,\n            address: 'Sidney No. 1 Lake Park',\n            tags: ['cool', 'teacher'],\n        },\n    ];\n\n\n    return (\n        <><Table columns={columns} dataSource={data} />\n            <h1>도연이를 향한 세레나데</h1>\n            <p className=\"songFont\">\n                <audio autoPlay controls>\n                    <source src={song} type=\"audio/mp3\"/>\n                </audio> 아름 ver\n            </p>\n        </>)\n}\n\nexport default SongsPage;"]},"metadata":{},"sourceType":"module"}